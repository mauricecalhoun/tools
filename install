#!/bin/bash

source ~/.bash_profile

# Header logging
e_header() {
    printf "\n$(tput setaf 7)%s$(tput sgr0)\n" "$@"
}

# Success logging
e_success() {
    printf "$(tput setaf 64)âœ“ %s$(tput sgr0)\n" "$@"
}

# Error logging
e_error() {
    printf "$(tput setaf 1)x %s$(tput sgr0)\n" "$@"
}

# Warning logging
e_warning() {
    printf "$(tput setaf 136)! %s$(tput sgr0)\n" "$@"
}

# Ask for confirmation before proceeding
seek_confirmation() {
    printf "\n"
    e_warning "$@"
    read -p "Continue? (y/n) " -n 1
    printf "\n"
}

# Test whether the result of an 'ask' is a confirmation
is_confirmed() {
    if [[ "$REPLY" =~ ^[Yy]$ ]]; then
      return 0
    fi
    return 1
}

# Test whether a command exists
# $1 - cmd to test
type_exists() {
    if [ $(type -P $1) ]; then
      return 0
    fi
    return 1
}

# Before relying on Homebrew, check that packages can be compiled
if ! type_exists 'gcc'; then
    e_error "The XCode Command Line Tools must be installed first."
    exit 1
fi

# Install Homebrew
e_header  "Installing Homebrew, a good OS X package manager ..."
  ruby -e "$(curl -fsSkL raw.github.com/mxcl/homebrew/go/install)"
  brew tap homebrew/dupes

# Create SSH Keys nd prompt user to add them to Github
e_header  "Checking for SSH key in ~/.ssh/id_rsa.pub, generating one if it doesn't exist ..."
  [[ -f ~/.ssh/id_rsa.pub ]] || ssh-keygen -t rsa

e_header  "Copying public key to clipboard."
  [[ -f ~/.ssh/id_rsa.pub ]] && cat ~/.ssh/id_rsa.pub | pbcopy

# Add SSH keys to Github
e_header  "Add your ssh key to Github"
  seek_confirmation "Open https://github.com/account/ssh in your browser"
  if is_confirmed; then
  open https://github.com/account/ssh
  fi

seek_confirmation "Test Github Authentication via ssh"
  if is_confirmed; then
  printf "\n Testing..."
  ssh -T git@github.com
  fi

# Install Homebrew Git
e_header  "Installing Git..."
  brew install git

# Before we do any config install our dotfiles
e_header  "Installing Newism dot files..."
  git clone git://github.com/leevigraham/dotfiles.git ~/.dotfiles
  ~/.dotfiles/bin/dotfiles
  ~/.dotfiles/bin/osx
  source ~/.bash_profile

e_header "Adding Global Git Config..."
  echo  "Whats your name? [Enter]: "
  read name
  echo "What's your email? [Enter]: "
  read email
  echo "git config --global user.name '$name'" >> .bash_profile.local
  echo "git config --global user.email '$email'" >> .bash_profile.local

# Install zsh
# e_header  "Installing zsh..."
#   brew install zsh
#   sudo mv /etc/zshenv /etc/zprofile

e_header "Install bash-completion..."
  brew install git bash-completion

e_header "Creating ~/Site folders"
  mkdir -p ~/Sites/Work/Clients
  mkdir -p ~/Sites/Work/Internal
  mkdir -p ~/Sites/Home

e_header "Install Solarized terminal theme"
  git clone git://github.com/tomislav/osx-lion-terminal.app-colors-solarized.git ~/Sites/Work/Internal/solarized-terminal
  open ~/Sites/Work/Internal/solarized-terminal/Solarized\ Light.terminal
  open ~/Sites/Work/Internal/solarized-terminal/Solarized\ Dark.terminal
  sleep 1 # Wait a bit to make sure the theme is loaded
  defaults write com.apple.terminal "Default Window Settings" -string "Solarized Light"
  defaults write com.apple.terminal "Startup Window Settings" -string "Solarized Light"

e_header "Installing ImageMagick, good for cropping and re-sizing images ..."
  brew install imagemagick

e_header "Installing optipng, a PNG optimizer that recompresses the image files to a smaller size, without losing any information. ..."
  brew install optipng

e_header  "Creating SSL Certificate and updating Apache..."
# See: http://webdevstudios.com/2013/05/24/how-to-set-up-ssl-with-osx-mountain-lions-built-in-apache/
  mkdir ssl
  cd ssl
  openssl genrsa -des3 -out server.key 1024
  openssl req -new -key server.key -out server.csr
  cp server.key server.key.org
  openssl rsa -in server.key.org -out server.key
  openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt
  sudo cp server.crt /private/etc/apache2/server.crt
  sudo cp server.key /private/etc/apache2/server.key

  # Include SSL Conf in /private/etc/apache2/httpd.conf
  sudo sed -i .bak 's/\#Include \/private\/etc\/apache2\/extra\/httpd-ssl.conf/Include \/private\/etc\/apache2\/extra\/httpd-ssl.conf/g' /private/etc/apache2/httpd.conf

e_header  "Installing Gitflow..."
  brew install git-flow

e_header "Installing Hub..."
  brew install hub
  
e_header "Installing RVM (Ruby Version Manager) and Ruby 1.9.3-p327, which becomes the default ..."
  curl -L https://get.rvm.io | bash -s stable
  source ~/.rvm/scripts/rvm

e_header "Installing packages required for RVM"
  brew install autoconf automake libtool pkg-config openssl readline libyaml sqlite libxml2 libxslt libksba

e_header "Installing Ruby 1.9.3 via RVM"
  rvm install 1.9.3
  rvm use 1.9.3 --default
  ruby -v

e_header "Installing bundler for handling dependencies..."
  gem install bundler --no-rdoc --no-ri

e_header "Installing guard for watching files for changes..."
  gem install guard --no-rdoc --no-ri

e_header "Installing KSS for generating styleguides..."
  gem install kss --no-rdoc --no-ri

e_header "Installing rake..."
  gem install rake --no-rdoc --no-ri

e_header "Installing latest version of Sass..."
  gem install sass --no-rdoc --no-ri

e_header "Installing latest version of Compass..."
  gem install compass --no-rdoc --no-ri

e_header "Updating Rubygems..."
  gem update
 
e_header "Installing Phantom JS for Javascript testing..."
  brew install phantomjs  
 
e_header "Installing Node and (Node Package Manager)..."
  brew install node
  sudo brew postinstall node
  brew link node
  
e_header "Installing Grunt..."
  npm install -g grunt-cli

e_header "Installing Underscore..."
  npm install -g underscore

e_header "Installing Backbone..."
  npm install -g backbone
  
e_header "Installing Coffeescript..."
  npm install -g coffee-script

e_header "Installing JSHint to validate Javascript code..."
  npm install -g jshint

e_header "Installing Uglify for minifying Javascript code..."
  npm install -g uglify-js
  
e_header "Installing Handlebars templating engine..."
  npm install -g handlebars

e_header "Installing Jade templating engine..."
  npm install -g jade

e_header "Installing JS2Coffee for converting projects to Coffeescript..."
  npm install -g js2coffee  
  
e_header "Cleaning Brew links..."
  ls -1 /usr/local/Library/LinkedKegs | while read line; do
    brew unlink $line
    brew link --force $line
  done
  
e_header "Tapping josegonzalez/homebrew-php..."
  brew tap josegonzalez/homebrew-php

e_header "Installing PHP 5.4..."
  brew install php54 --with-mysql --with-homebrew-openssl --with-pgsql --with-mssql --with-imap --with-tidy
  brew link php54

e_header "Updating the date.timezone setting in /usr/local/etc/php/5.4/php.ini"
  sed -i .bak 's/\;date.timezone =/date.timezone = "Australia\/Sydney"/g' /usr/local/etc/php/5.4/php.ini
  sed -i .bak 's/\;auto_detect_line_endings = Off/auto_detect_line_endings = On/g' /usr/local/etc/php/5.4/php.ini

e_header "Installing PHP 5.4 xDebug..."
  brew install php54-xdebug

e_header "Installing PHP 5.4 APC..."
  brew install php54-apc

e_header "Installing PHP 5.4 Twig..."
  brew install php54-twig

e_header "Installing PHP 5.4 intl..."
  brew install php54-intl

e_header "Installing PHP 5.4 Imagick"
  brew install php54-imagick

e_header "Installing PHP 5.4 MCrypt..."
  brew install php54-mcrypt
  
e_header "Fixing PEAR permissions"
  chmod -R ug+w $(brew --prefix php54)/lib/php
  pear config-set php_ini /usr/local/etc/php/5.4/php.ini
  pear config-set auto_discover 1  
	
e_header "Installing Composer (PHP package manager)..."
  brew install composer
  composer self-update

e_header "Installing Capifony..."
  gem install capifony
  
e_header "Instaling PHP Q/A Tools"

  pear channel-discover pear.pdepend.org
  pear channel-discover pear.phpmd.org
  pear channel-discover pear.phpunit.de
  pear channel-discover pear.phpdoc.org
  pear channel-discover components.ez.no
  pear channel-discover pear.symfony-project.com
  
  pear install pdepend/PHP_Depend
  pear install phpmd/PHP_PMD
  pear install phpunit/phpcpd
  pear install phpunit/phploc
  pear install --alldeps phpunit/PHP_CodeBrowser
  pear install --alldeps phpunit/PHPUnit
  pear install phpdoc/phpDocumentor-alpha
  pear install PHP_CodeSniffer
  pear install pear.phpqatools.org/phpqatools
  pear install pear.netpirates.net/phpDox-alpha

  phpcs --config-set default_standard Symfony2  

e_header "Installing PHP CS Fixer..."
  curl http://cs.sensiolabs.org/get/php-cs-fixer.phar -o /usr/local/bin/php-cs-fixer
  chmod a+x /usr/local/bin/php-cs-fixer
  
e_header "Installing Rails"
  gem install rails 
  
e_header "Installing Yeoman"
  npm install -g yo  
  
e_header "Installing PHP POW by Dan Ott"
  gem install phpow
  
e_header "Installing Rails POW by Sam Stephenson"
  curl get.pow.cx | sh  
  
e_header "Enable keyboard access for all controls/modals"
  defaults write NSGlobalDomain AppleKeyboardUIMode -int 3
  e_success "Done"

e_header "Disable OS X press-and-hold keys to increase key repeat rate."
  defaults write NSGlobalDomain ApplePressAndHoldEnabled -bool false
  e_success "Done"

e_header "Set up a fast key repeat rate."
  defaults write NSGlobalDomain KeyRepeat -int 0.02
  e_success "Done"

e_header "Decrease the delay until keys are repeated."
  defaults write NSGlobalDomain InitialKeyRepeat -int 12
  e_success "Done"

e_header "Disable autocorrect (srsly.)"
  defaults write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool false
  e_success "Done"

e_header "Enable sub-pixel rendering even if you don't have a fancy Apple display"
  defaults write NSGlobalDomain AppleFontSmoothing -int 2
  e_success "Done"

e_header "Automatically hide and show the dock"
  defaults write com.apple.dock autohide -bool true
  e_success "Done"

e_header "Make hidden applications semi-transparent on the dock"
  defaults write com.apple.dock showhidden -bool true
  e_success "Done"

e_header "Allow Finder to quit (using âŒ˜Q)"
  defaults write com.apple.finder QuitMenuItem -bool true
  e_success "Done"

e_header "Show all filename extensions in the finder"
  defaults write NSGlobalDomain AppleShowAllExtensions -bool true
  e_success "Done"

e_header "Show the path bar in the Finder"
  defaults write com.apple.finder ShowPathbar -bool true
  e_success "Done"

e_header "Expand the Save panel by default in all applications"
  defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true
  e_success "Done"

e_header "Expand the Printer panel by default in all applications"
  defaults write NSGlobalDomain PMPrintingExpandedStateForPrint -bool true
  e_success "Done"

e_header "Enable airdrop-over-ethernet for bridged networks"
  defaults write com.apple.NetworkBrowser BrowseAllInterfaces -bool true
  e_success "Done"

e_header "Avoid creating DSStore files on network volumes"
  defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true
  e_success "Done"

e_header "Display the full POSIX path as the Finder window's title"
  defaults write com.apple.finder _FXShowPosixPathInTitle -bool true
  e_success "Done"

e_header "Disable the warning when you change a file extension"
  defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false
  e_success "Done"

e_header "Disable the warning shown before you empty the trash"
  defaults write com.apple.finder WarnOnEmptyTrash -bool false
  e_success "Done"

e_header "Empty the trash securely by default (yes, this will be time consuming)"
  defaults write com.apple.finder EmptyTrashSecurely -bool true
  e_success "Done"

e_header "Reveal the ~/Library folder"
  chflags nohidden ~/Library
  e_success "Done"

e_header "Increase the window resize speed for Cocoa apps"
  defaults write NSGlobalDomain NSWindowResizeTime -float 0.001
  e_success "Done"

e_header "Require password immediately after sleep or screensaver begins."
  defaults write com.apple.screensaver askForPassword -int 1
  defaults write com.apple.screensaver askForPasswordDelay -int 0
  e_success "Done"

e_header "Only use UTF-8 in Terminal.app"
  defaults write com.apple.terminal StringEncodings -array 4  
  e_success "Done"

sudo apachectl restart
cd ../
  
source ~/.bash_profile

e_success "Boom... success opening localhost"

open https//:localhost
